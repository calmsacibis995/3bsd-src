$pr$ complra.l ?^(def $pr$ $?
$pr$ complrc.l ?^(def $pr$ (macro (x) `(patom ,(cadr x) compout)))$?
$pr$ compmacs.l ?^(def $pr$ (macro (x) `(patom ,(cadr x) compout)))$?
$terpri complra.l ?^(def $terpri (lambda () (terpr compout)))$?
'= complrd.l ?^(defsysf '=     '_Lequal)$?
'> complrd.l ?^(defsysf '>     '_Lgreaterp)$?
'add complrd.l ?^(defsysf 'add   '_Ladd)$?
'add1 complrd.l ?^(defsysf 'add1  '_Ladd1)$?
'concat complrd.l ?^(defsysf 'concat '_Lconcat)$?
'cons complrd.l ?^(defsysf 'cons  '_Lcons)$?
'difference complrd.l ?^(defsysf 'difference '_Lsub)$?
'get complrd.l ?^(defsysf 'get   '_Lget)$?
'list complrd.l ?^(defsysf 'list   '_Llist)$?
'mapc complrd.l ?^(defsysf 'mapc '_Lmapc)$?
'mapcan complrd.l ?^(defsysf 'mapcan '_Lmapcan)$?
'minus complrd.l ?^(defsysf 'minus '_Lminus)$?
'patom complrd.l ?^(defsysf 'patom '_Lpatom)$?
'plist complrd.l ?^(defsysf 'plist '_Lplist)$?
'plus complrd.l ?^(defsysf 'plus  '_Ladd)$?
'print complrd.l ?^(defsysf 'print '_Lprint)$?
'putprop complrd.l ?^(defsysf 'putprop '_Lputprop)$?
'read complrd.l ?^(defsysf 'read '_Lread)$?
'sub1 complrd.l ?^(defsysf 'sub1  '_Lsub1)$?
'times complrd.l ?^(defsysf 'times '_Ltimes)$?
*expr complrb.l ?^(def *expr (nlambda (args) nil))	; ignore$?
*fexpr complrb.l ?^(def *fexpr$?
append complra.l ?^(def append (lambda (x y)$?
aprint complra.l ?^(def aprint $?
assoc complra.l ?^(def assoc$?
chain complra.l ?^(def chain $?
cleanup complra.l ?^(def cleanup (lambda nil$?
cm-alist complrb.l ?^(def cm-alist$?
cm-alst1 complrb.l ?^(def cm-alst1$?
cm-alst2 complrb.l ?^(def cm-alst2$?
cm-alst3 complrb.l ?^(def cm-alst3$?
cm-alst4 complrb.l ?^(def cm-alst4$?
cm-bind complrb.l ?^(def cm-bind$?
cm-emit complrb.l ?^(def cm-emit $?
cmacroexpand complrb.l ?^(def cmacroexpand$?
comp-err compmacs.l ?^(def comp-err$?
comp-note compmacs.l ?^(def comp-note$?
comp-warn compmacs.l ?^(def comp-warn$?
cvt complra.l ?^(def cvt (lambda (a)$?
defsysf complra.l ?^(def defsysf$?
dodcl complrb.l ?^(def dodcl $?
dodef complrb.l ?^(def dodef$?
e-*throw complrd.l ?^(def e-*throw$?
e-addr complrd.l ?^(def e-addr $?
e-alist complrd.l ?^(def e-alist$?
e-arg complrd.l ?^(def e-arg$?
e-begin complrd.l ?^(def e-begin $?
e-bind complrd.l ?^(def e-bind $?
e-call complrd.l ?^(def e-call	$?
e-catchent complrd.l ?^(def e-catchent$?
e-catchexit complrd.l ?^(def e-catchexit$?
e-chain complrd.l ?^(def e-chain $?
e-dopop complrd.l ?^(def e-dopop $?
e-drop complrd.l ?^(def e-drop $?
e-end complrd.l ?^(def e-end$?
e-entry complrd.l ?^(def e-entry$?
e-eq complrd.l ?^(def e-eq$?
e-eqs complrd.l ?^(def e-eqs $?
e-eqv complrd.l ?^(def e-eqv $?
e-false complrd.l ?^(def e-false $?
e-fini complrd.l ?^(def e-fini$?
e-fpush complrd.l ?^(def e-fpush $?
e-get complrd.l ?^(def e-get $?
e-getype complrd.l ?^(def e-getype $?
e-gfpush complrd.l ?^(def e-gfpush$?
e-go complrd.l ?^(def e-go $?
e-gpush complrd.l ?^(def e-gpush $?
e-have complrd.l ?^(def e-have $?
e-label complrd.l ?^(def e-label $?
e-list complrd.l ?^(def e-list (lambda nil nil)) $?
e-lose complrd.l ?^(def e-lose $?
e-mark complrd.l ?^(def e-mark $?
e-minus complrd.l ?^(def e-minus $?
e-note complrd.l ?^(def e-note $?
e-push complrd.l ?^(def e-push $?
e-pushnil complrd.l ?^(def e-pushnil$?
e-pushnoreg complrd.l ?^(def e-pushnoreg$?
e-reg complrd.l ?^(def e-reg $?
e-repeat complrd.l ?^(def e-repeat $?
e-save complrd.l ?^(def e-save$?
e-set complrd.l ?^(def e-set $?
e-seta complrd.l ?^(def e-seta $?
e-setas complrd.l ?^(def e-setas $?
e-setd complrd.l ?^(def e-setd $?
e-setds complrd.l ?^(def e-setds $?
e-setnoreg complrd.l ?^(def e-setnoreg$?
e-skip complrd.l ?^(def e-skip $?
e-true complrd.l ?^(def e-true	$?
e-type complrd.l ?^(def e-type$?
e-unbind complrd.l ?^(def e-unbind$?
e-unsave complrd.l ?^(def e-unsave$?
e-xbind complrd.l ?^(def e-xbind$?
emit1 complra.l ?^(def emit1 $?
emit2 complra.l ?^(def emit2 $?
emit3 complra.l ?^(def emit3 $?
emit4 complra.l ?^(def emit4 $?
f-*catch complrc.l ?^(def f-*catch$?
f-*throw complrc.l ?^(def f-*throw$?
f-addi complrc.l ?^(def f-addi $?
f-all complrc.l ?^(def f-all $?
f-and complrc.l ?^(def f-and $?
f-aor complrc.l ?^(def f-aor $?
f-arg complrc.l ?^(def f-arg$?
f-atom complrc.l ?^(def f-atom $?
f-bcdp complrc.l ?^(def f-bcdp $?
f-chop complrc.l ?^(def f-chop $?
f-con complrc.l ?^(def f-con $?
f-cond complrc.l ?^(def f-cond	$?
f-do complrc.l ?^(def f-do$?
f-dobody complrc.l ?^(def f-dobody$?
f-domap complrc.l ?^(def f-domap$?
f-dtpr complrc.l ?^(def f-dtpr $?
f-endbody complrc.l ?^(def f-endbody$?
f-endtest complrc.l ?^(def f-endtest$?
f-eq complrc.l ?^(def f-eq $?
f-errset complrc.l ?^(def f-errset$?
f-exp complrb.l ?^(def f-exp $?
f-func complrb.l ?^(def f-func $?
f-go complrc.l ?^(def f-go $?
f-if complrc.l ?^(def f-if $?
f-inits complrc.l ?^(def f-inits$?
f-initv complrc.l ?^(def f-initv$?
f-iter complrc.l ?^(def f-iter$?
f-labl complrc.l ?^(def f-labl $?
f-lambbody complrb.l ?^(def f-lambbody$?
f-lambexp complrb.l ?^(def f-lambexp$?
f-leap complrc.l ?^(def f-leap $?
f-like complrc.l ?^(def f-like $?
f-make complrc.l ?^(def f-make $?
f-map complrc.l ?^(def f-map$?
f-mapc complrc.l ?^(def f-mapc$?
f-mapcar complrc.l ?^(def f-mapcar$?
f-maplist complrc.l ?^(def f-maplist$?
f-nice complrc.l ?^(def f-nice $?
f-null complrc.l ?^(def f-null $?
f-numberp complrc.l ?^(def f-numberp $?
f-one complrc.l ?^(def f-one $?
f-or complrc.l ?^(def f-or $?
f-plist complrc.l ?^(def f-plist $?
f-prog complrb.l ?^(def f-prog$?
f-pusha complrc.l ?^(def f-pusha$?
f-quote complrc.l ?^(def f-quote $?
f-reg complrc.l ?^(def f-reg $?
f-repl complrc.l ?^(def f-repl $?
f-reps complrc.l ?^(def f-reps$?
f-repv complrc.l ?^(def f-repv$?
f-return complrc.l ?^(def f-return$?
f-rplaca complrc.l ?^(def f-rplaca $?
f-rplacd complrc.l ?^(def f-rplacd $?
f-seq complrc.l ?^(def f-seq$?
f-seqp complrc.l ?^(def f-seqp $?
f-setq complrc.l ?^(def f-setq $?
f-stringp complrc.l ?^(def f-stringp $?
f-swap complrc.l ?^(def f-swap $?
f-symbolp complrc.l ?^(def f-symbolp $?
f-test complrc.l ?^(def f-test $?
f-tfo complrc.l ?^(def f-tfo $?
f-ty complrc.l ?^(def f-ty $?
f-type complrc.l ?^(def f-type $?
f-use complrc.l ?^(def f-use$?
f-vble complrc.l ?^(def f-vble $?
f-xgo complrc.l ?^(def f-xgo $?
f-xreturn complrc.l ?^(def f-xreturn $?
f-xval complrc.l ?^(def f-xval $?
f-zerop complrc.l ?^(def f-zerop $?
flag complra.l ?^(def flag $?
g-specialchk complrb.l ?^(def g-specialchk$?
gensym complra.l ?^(def Gensym (lambda (x)$?
ifflag complra.l ?^(def ifflag $?
ismacro complra.l ?^(def ismacro $?
isnlam complra.l ?^(def isnlam $?
lcf complrb.l ?^(def lcf$?
lcfform complrb.l ?^(def lcfform$?
lcfinit complrb.l ?^(def lcfinit$?
leftshift complra.l ?^(def leftshift $?
macros complrb.l ?^(def macros (nlambda (args) (setq macros (car args))))$?
mapconvert complrc.l ?^(def mapconvert$?
member complra.l ?^(def member (lambda ($a$ $l$)$?
mylogor complra.l ?^(def mylogor (lambda (x y)$?
nth complra.l ?^(def nth$?
olddo-to-newdo complrc.l ?^(def olddo-to-newdo$?
prog2toprog complrc.l ?^(def prog2toprog$?
put complra.l ?^(def put $?
put complrc.l ?^(def put $?
put compmacs.l ?^(def put $?
reverse complra.l ?^(def reverse (lambda (x)$?
reverse1 complra.l ?^(def reverse1 $?
special complrb.l ?^(def special$?
ucar complra.l ?^(def ucar $?
unflag complra.l ?^(def unflag $?
unspecial complrb.l ?^(def unspecial$?
w-save complrb.l ?^(def w-save$?
w-unsave complrb.l ?^(def w-unsave$?
